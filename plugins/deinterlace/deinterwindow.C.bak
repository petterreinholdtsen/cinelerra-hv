#include "bcdisplayinfo.h"
#include "deinterwindow.h"




PLUGIN_THREAD_OBJECT(DeInterlaceMain, DeInterlaceThread, DeInterlaceWindow)




DeInterlaceWindow::DeInterlaceWindow(DeInterlaceMain *client, int x, int y)
 : BC_Window(client->gui_string, 
 	x, 
	y, 
	200, 
	270, 
	200, 
	270, 
	0, 
	1)
{ 
	this->client = client; 
}

DeInterlaceWindow::~DeInterlaceWindow()
{
}

int DeInterlaceWindow::create_objects()
{
	int x = 10, y = 10;
	add_tool(new BC_Title(x, y, "Select lines to keep"));
	y += 25;
	add_tool(odd_fields = new DeInterlaceOption(client, this, DEINTERLACE_EVEN, x, y, "Odd lines"));
	y += 25;
	add_tool(even_fields = new DeInterlaceOption(client, this, DEINTERLACE_ODD, x, y, "Even lines"));
	y += 25;
	add_tool(average_fields = new DeInterlaceOption(client, this, DEINTERLACE_AVG, x, y, "Average lines"));
	y += 25;
	add_tool(avg_even = new DeInterlaceOption(client, this, DEINTERLACE_AVG_EVEN, x, y, "Average even lines"));
	y += 25;
	add_tool(avg_odd = new DeInterlaceOption(client, this, DEINTERLACE_AVG_ODD, x, y, "Average odd lines"));
// 	y += 25;
// 	add_tool(swap_fields = new DeInterlaceOption(client, this, DEINTERLACE_SWAP, x, y, "Swap lines"));
// 	y += 30;
// 	add_tool(adaptive = new DeInterlaceAdaptive(client, x, y));
// 	y += 30;
// 	add_tool(new BC_Title(x, y + 10, "Threshold:"));
// 	add_tool(threshold = new DeInterlaceThreshold(client,
// 		x + 100,
// 		y));
	return 0;
}

WINDOW_CLOSE_EVENT(DeInterlaceWindow)


int DeInterlaceWindow::set_mode(int mode, int recursive)
{
	odd_fields->update(mode == DEINTERLACE_EVEN);
	even_fields->update(mode == DEINTERLACE_ODD);
	average_fields->update(mode == DEINTERLACE_AVG);
	swap_fields->update(mode == DEINTERLACE_SWAP);
	avg_even->update(mode == DEINTERLACE_AVG_EVEN);
	avg_odd->update(mode == DEINTERLACE_AVG_ODD);

	client->config.mode = mode;
	
	if(!recursive)
		client->send_configure_change();
}


DeInterlaceOption::DeInterlaceOption(DeInterlaceMain *client, 
		DeInterlaceWindow *window, 
		int output, 
		int x, 
		int y, 
		char *text)
 : BC_Radial(x, y, client->config.mode == output, text)
{
	this->client = client;
	this->window = window;
	this->output = output;
}

DeInterlaceOption::~DeInterlaceOption()
{
}
int DeInterlaceOption::handle_event()
{
	window->set_mode(output, 0);
	return 1;
}


DeInterlaceAdaptive::DeInterlaceAdaptive(DeInterlaceMain *client,
	int x,
	int y)
 : BC_CheckBox(x, y, client->config.adaptive, "Adaptive")
{
	this->client = client;
}

int DeInterlaceAdaptive::handle_event()
{
	client->config.adaptive = get_value();
	client->send_configure_change();
	return 1;
}





DeInterlaceThreshold::DeInterlaceThreshold(DeInterlaceMain *client,
	int x,
	int y)
 : BC_IPot(x, y, client->config.threshold, 0, 100)
{
	this->client = client;
}
int DeInterlaceThreshold::handle_event()
{
	client->config.threshold = get_value();
	client->send_configure_change();
	return 1;
}






