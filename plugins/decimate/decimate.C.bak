#include "bcdisplayinfo.h"
#include "clip.h"
#include "defaults.h"
#include "filexml.h"
#include "guicast.h"
#include "keyframe.h"
#include "language.h"
#include "picon_png.h"
#include "pluginvclient.h"
#include "vframe.h"

#include <string.h>
#include <stdint.h>


#define TOP_FIELD_FIRST 0
#define BOTTOM_FIELD_FIRST 1
#define TOTAL_FRAMES 5

class Decimate;
class DecimateWindow;


class DecimateConfig
{
public:
	DecimateConfig();
	double input_rate;
	int averaged_frames;
	int least_difference;
};




class DecimateRate : public BC_TextBox
{
public:
	DecimateRate(Decimate *plugin, 
		DecimateWindow *gui, 
		int x, 
		int y);
	int handle_event();
	Decimate *plugin;
	DecimateWindow *gui;
};

class DecimateRateMenu : public BC_ListBox
{
public:
	DecimateRateMenu(Decimate *plugin, 
		DecimateWindow *gui, 
		int x, 
		int y);
	int handle_event();
	Decimate *plugin;
	DecimateWindow *gui;
};

class DecimateDifference : public BC_CheckBox
{
public:
	DecimateDifference(Decimate *plugin,
		int x, 
		int y);
	int handle_event();
	Decimate *plugin;
};

class DecimateAvgDifference : public BC_CheckBox
{
public:
	DecimateAvgDifference(Decimate *plugin,
		int x, 
		int y);
	int handle_event();
	Decimate *plugin;
};


class DecimateWindow : public BC_Window
{
public:
	DecimateWindow(Decimate *plugin, int x, int y);

	void create_objects();
	int close_event();

	ArrayList<BC_ListBoxItem*> frame_rates;
	Decimate *plugin;
	DecimateRate *rate;
	DecimateRateMenu *rate_menu;
//	DecimateDifference *difference;
//	DecimateAvgDifference *avg_difference;
};


PLUGIN_THREAD_HEADER(Decimate, DecimateThread, DecimateWindow)



class Decimate : public PluginVClient
{
public:
	Decimate(PluginServer *server);
	~Decimate();

	int process_buffer(VFrame *frame,
		int64_t start_position,
		double frame_rate);
	int is_realtime();
	char* plugin_title();
	VFrame* new_picon();
	int show_gui();
	void load_configuration();
	int set_string();
	int load_defaults();
	int save_defaults();
	void save_data(KeyFrame *keyframe);
	void read_data(KeyFrame *keyframe);
	void raise_window();
	void update_gui();


	int64_t calculate_difference(VFrame *frame1, VFrame *frame2);
	void fill_lookahead(double frame_rate,
		int64_t start_position);
	void decimate_frame();


// each difference is the difference between the previous frame and the 
// subscripted frame
	int64_t differences[TOTAL_FRAMES];
// difference between current frame and current frame - 2 for removing
// averaged frames
	int64_t differences2[TOTAL_FRAMES];

// read ahead number of frames
	VFrame *frames[TOTAL_FRAMES];
// Number of frames in the lookahead buffer
	int lookahead_size;
// Next position beyond end of lookahead buffer relative to input rate
	int64_t lookahead_end;
// Framerate of lookahead buffer
	double lookahead_rate;
// Last requested position
	int64_t last_position;

	DecimateThread *thread;
	DecimateConfig config;
	Defaults *defaults;
};












DecimateConfig::DecimateConfig()
{
	input_rate = (double)30000 / 1001;
	least_difference = 0;
	averaged_frames = 1;
}









DecimateWindow::DecimateWindow(Decimate *plugin, int x, int y)
 : BC_Window(plugin->gui_string, 
 	x, 
	y, 
	210, 
	160, 
	200, 
	160, 
	0, 
	0,
	1)
{
	this->plugin = plugin;
}

void DecimateWindow::create_objects()
{
	int x = 10, y = 10;

	frame_rates.append(new BC_ListBoxItem("1"));
	frame_rates.append(new BC_ListBoxItem("5"));
	frame_rates.append(new BC_ListBoxItem("10"));
	frame_rates.append(new BC_ListBoxItem("12"));
	frame_rates.append(new BC_ListBoxItem("15"));
	frame_rates.append(new BC_ListBoxItem("23.97"));
	frame_rates.append(new BC_ListBoxItem("24"));
	frame_rates.append(new BC_ListBoxItem("25"));
	frame_rates.append(new BC_ListBoxItem("29.97"));
	frame_rates.append(new BC_ListBoxItem("30"));
	frame_rates.append(new BC_ListBoxItem("50"));
	frame_rates.append(new BC_ListBoxItem("59.94"));
	frame_rates.append(new BC_ListBoxItem("60"));

	add_subwindow(new BC_Title(x, y, "Input frames per second:"));
	y += 30;
	add_subwindow(rate = new DecimateRate(plugin, 
		this, 
		x, 
		y));
	add_subwindow(rate_menu = new DecimateRateMenu(plugin, 
		this, 
		x + rate->get_w() + 5, 
		y));

// 	y += 30;
// 	add_subwindow(difference = new DecimateDifference(plugin,
// 		x, 
// 		y));
// 	y += 30;
// 	add_subwindow(avg_difference = new DecimateAvgDifference(plugin,
// 		x, 
// 		y));
	show_window();
	flush();
}

int DecimateWindow::close_event()
{
	set_done(1);
	return 1;
}












DecimateRate::DecimateRate(Decimate *plugin, 
	DecimateWindow *gui, 
	int x, 
	int y)
 : BC_TextBox(x, 
	y, 
	90,
	1,
	(float)plugin->config.input_rate)
{
	this->plugin = plugin;
	this->gui = gui;
}

int DecimateRate::handle_event()
{
	plugin->config.input_rate = Units::atoframerate(get_text());
	plugin->send_configure_change();
	return 1;
}



// DecimateDifference::DecimateDifference(Decimate *plugin,
// 	int x, 
// 	int y)
//  : BC_CheckBox(x, y, plugin->config.least_difference, "Drop least difference")
// {
// 	this->plugin = plugin;
// }
// int DecimateDifference::handle_event()
// {
// 	plugin->config.least_difference = get_value();
// 	plugin->send_configure_change();
// 	return 1;
// }
// 
// 
// 
// 
// DecimateAvgDifference::DecimateAvgDifference(Decimate *plugin,
// 	int x, 
// 	int y)
//  : BC_CheckBox(x, y, plugin->config.averaged_frames, "Drop averaged frames")
// {
// 	this->plugin = plugin;
// }
// 
// int DecimateAvgDifference::handle_event()
// {
// 	plugin->config.averaged_frames = get_value();
// 	plugin->send_configure_change();
// 	return 1;
// }
// 



DecimateRateMenu::DecimateRateMenu(Decimate *plugin, 
	DecimateWindow *gui, 
	int x, 
	int y)
 : BC_ListBox(x,
 	y,
	100,
	200,
	LISTBOX_TEXT,
	&gui->frame_rates,
	0,
	0,
	1,
	0,
	1)
{
	this->plugin = plugin;
	this->gui = gui;
}

int DecimateRateMenu::handle_event()
{
	char *text = get_selection(0, 0)->get_text();
	plugin->config.input_rate = atof(text);
	gui->rate->update(text);
	plugin->send_configure_change();
	return 1;
}











PLUGIN_THREAD_OBJECT(Decimate, DecimateThread, DecimateWindow)










REGISTER_PLUGIN(Decimate)






Decimate::Decimate(PluginServer *server)
 : PluginVClient(server)
{
	PLUGIN_CONSTRUCTOR_MACRO
	bzero(frames, sizeof(VFrame*) * TOTAL_FRAMES);
	bzero(differences, sizeof(int64_t) * TOTAL_FRAMES);
	bzero(differences2, sizeof(int64_t) * TOTAL_FRAMES);
	lookahead_size = 0;
	lookahead_end = -1;
	last_position = -1;
}


Decimate::~Decimate()
{
	PLUGIN_DESTRUCTOR_MACRO
	if(frames[0])
	{
		for(int i = 0; i < TOTAL_FRAMES; i++)
		{
			delete frames[i];
		}
	}
}

#define DIFFERENCE_MACRO(type, components) \
{ \
	for(int i = 0; i < h; i++) \
	{ \
		type *row1 = (type*)frame1->get_rows()[i]; \
		type *row2 = (type*)frame2->get_rows()[i]; \
		for(int j = 0; j < w * components; j++) \
		{ \
			int64_t temp = *row1 - *row2; \
			result += (temp > 0 ? temp : -temp); \
			row1++; \
			row2++; \
		} \
	} \
}

int64_t Decimate::calculate_difference(VFrame *frame1, VFrame *frame2)
{
	int w = frame1->get_w();
	int h = frame1->get_h();
	int64_t result = 0;
	switch(frame1->get_color_model())
	{
		case BC_RGB888:
		case BC_YUV888:
			DIFFERENCE_MACRO(unsigned char, 3);
			break;
		case BC_RGBA8888:
		case BC_YUVA8888:
			DIFFERENCE_MACRO(unsigned char, 4);
			break;
		case BC_RGB161616:
		case BC_YUV161616:
			DIFFERENCE_MACRO(uint16_t, 3);
			break;
		case BC_RGBA16161616:
		case BC_YUVA16161616:
			DIFFERENCE_MACRO(uint16_t, 4);
			break;
	}
	return result;
}


void Decimate::decimate_frame()
{
	int64_t min_difference = 0x7fffffffffffffffLL;
	int64_t max_difference2 = 0x0;
	int64_t result = -1;

	if(!lookahead_size) return;

printf("Decimate::decimate_frame ");
	for(int i = 0; i < lookahead_size; i++)
	{
// Drop least different frame from sequence
		if(config.least_difference && 
//			i > 0 &&
			differences[i] &&
			differences[i] < min_difference)
		{
			min_difference = differences[i];
			result = i;
		}

// Get difference between n - 2 and n.
// Get difference between n - 1 and n.
// The larger the difference between the differences, the more likely n - 1
// is averaged.
		if(config.averaged_frames && 
			differences2[i] &&
			differences[i] && 
			i > 0)
		{
			int64_t current_difference = differences2[i] - differences[i];
			if(current_difference < 0) current_difference *= -1LL;
printf(" %lld", current_difference);
			if(current_difference > max_difference2)
			{
				max_difference2 = current_difference;
				result = i - 1;
			}
		}
	}
printf("\n");

// If all the frames had differences of 0, like a pure black screen, delete
// the first frame.
	if(result < 0) result = 0;

// Swap min difference pointer for last pointer and decrease total
// 	VFrame *temp = frames[result - 1];
// 	for(int i = result; i < lookahead_size; i++)
// 	{
// 		frames[i - 1] = frames[i];
// 		if(i < lookahead_size - 1)
// 		{
// 			differences[i] = differences[i + 1];
// 			differences2[i] = differences2[i + 1];
// 		}
// 	}

	VFrame *temp = frames[result];
//printf("Decimate::decimate 10 %d %p\n", result, temp);
	for(int i = result; i < lookahead_size - 1; i++)
	{
		frames[i] = frames[i + 1];
		differences[i] = differences[i + 1];
		differences2[i] = differences2[i + 1];
	}


	frames[lookahead_size - 1] = temp;
	lookahead_size--;
}

void Decimate::fill_lookahead(double frame_rate,
	int64_t start_position)
{
// Lookahead rate changed
	if(!EQUIV(config.input_rate, lookahead_rate))
	{
		lookahead_size = 0;
	}

	lookahead_rate = config.input_rate;

// Start position is not contiguous with last request
	if(last_position + 1 != start_position)
	{
		lookahead_size = 0;
	}

	last_position = start_position;

// Normalize requested position to input rate
	if(!lookahead_size)
	{
		lookahead_end = (int64_t)((double)start_position * 
			config.input_rate / 
			frame_rate);
	}

	while(lookahead_size < TOTAL_FRAMES)
	{
// Import frame into next lookahead slot
		read_frame(frames[lookahead_size], 
			0, 
			lookahead_end, 
			config.input_rate);
// Fill difference buffer
		if(lookahead_size > 0 /* && config.least_difference */)
			differences[lookahead_size] = 
				calculate_difference(frames[lookahead_size - 1], 
					frames[lookahead_size]);

// Fill difference2 buffer
		if(lookahead_size > 1 && config.averaged_frames)
			differences2[lookahead_size] =
				calculate_difference(frames[lookahead_size - 2],
					frames[lookahead_size]);

// Increase counters relative to input rate
		lookahead_size++;
		lookahead_end++;

// Decimate one if last frame in buffer and lookahead_end is behind predicted
// end.
		int64_t decimated_end = (int64_t)((double)(start_position + TOTAL_FRAMES) *
			config.input_rate / 
			frame_rate);
		if(lookahead_size >= TOTAL_FRAMES &&
			lookahead_end < decimated_end)
		{
			decimate_frame();
		}
	}
}


int Decimate::process_buffer(VFrame *frame,
	int64_t start_position,
	double frame_rate)
{

//printf("Decimate::process_buffer 1 %lld %f\n", start_position, frame_rate);
	load_configuration();

	if(!frames[0])
	{
		for(int i = 0; i < TOTAL_FRAMES; i++)
		{
			frames[i] = new VFrame(0,
				frame->get_w(),
				frame->get_h(),
				frame->get_color_model(),
				-1);
		}
	}


// Fill lookahead buffer at input rate with decimation
	fill_lookahead(frame_rate, start_position);

// printf("Decimate::process_buffer");
// for(int i = 0; i < TOTAL_FRAMES; i++)
// printf(" %lld,%lld", differences[i], differences2[i]);
// printf("\n");
// Pull first frame off lookahead
	frame->copy_from(frames[0]);
	VFrame *temp = frames[0];
	for(int i = 0; i < TOTAL_FRAMES - 1; i++)
	{
		frames[i] = frames[i + 1];
		differences[i] = differences[i + 1];
		differences2[i] = differences2[i + 1];
	}
	frames[TOTAL_FRAMES - 1] = temp;
	lookahead_size--;
	return 0;
}



int Decimate::is_realtime()
{
	return 1;
}

char* Decimate::plugin_title()
{
	return _("Decimate");
}

NEW_PICON_MACRO(Decimate) 

SHOW_GUI_MACRO(Decimate, DecimateThread)

RAISE_WINDOW_MACRO(Decimate)

SET_STRING_MACRO(Decimate);

void Decimate::load_configuration()
{
	KeyFrame *prev_keyframe;
	prev_keyframe = get_prev_keyframe(get_source_position());
	read_data(prev_keyframe);
}

int Decimate::load_defaults()
{
	char directory[BCTEXTLEN];
// set the default directory
	sprintf(directory, "%sdecimate.rc", BCASTDIR);

// load the defaults
	defaults = new Defaults(directory);
	defaults->load();

	config.input_rate = defaults->get("INPUT_RATE", config.input_rate);
//	config.averaged_frames = defaults->get("AVERAGED_FRAMES", config.averaged_frames);
//	config.least_difference = defaults->get("LEAST_DIFFERENCE", config.least_difference);
	config.input_rate = Units::fix_framerate(config.input_rate);
	return 0;
}

int Decimate::save_defaults()
{
	defaults->update("INPUT_RATE", config.input_rate);
//	defaults->update("AVERAGED_FRAMES", config.averaged_frames);
//	defaults->update("LEAST_DIFFERENCE", config.least_difference);
	defaults->save();
	return 0;
}

void Decimate::save_data(KeyFrame *keyframe)
{
	FileXML output;

// cause data to be stored directly in text
	output.set_shared_string(keyframe->data, MESSAGESIZE);
	output.tag.set_title("DECIMATE");
	output.tag.set_property("INPUT_RATE", config.input_rate);
//	output.tag.set_property("AVERAGED_FRAMES", config.averaged_frames);
//	output.tag.set_property("LEAST_DIFFERENCE", config.least_difference);
	output.append_tag();
	output.terminate_string();
}

void Decimate::read_data(KeyFrame *keyframe)
{
	FileXML input;

	input.set_shared_string(keyframe->data, strlen(keyframe->data));

	int result = 0;

	while(!input.read_tag())
	{
		if(input.tag.title_is("DECIMATE"))
		{
			config.input_rate = input.tag.get_property("INPUT_RATE", config.input_rate);
//			config.averaged_frames = input.tag.get_property("AVERAGED_FRAMES", config.averaged_frames);
//			config.least_difference = input.tag.get_property("LEAST_DIFFERENCE", config.least_difference);
			config.input_rate = Units::fix_framerate(config.input_rate);
		}
	}
}

void Decimate::update_gui()
{
	if(thread)
	{
		thread->window->lock_window();
		thread->window->rate->update((float)config.input_rate);
//		thread->window->difference->update(config.least_difference);
//		thread->window->avg_difference->update(config.averaged_frames);
		thread->window->unlock_window();
	}
}





