
/*
 * CINELERRA
 * Copyright (C) 2010 Adam Williams <broadcast at earthling dot net>
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * 
 */

#include "bcdisplayinfo.h"
#include "bcsignals.h"
#include "clip.h"
#include "bchash.h"
#include "filexml.h"
#include "language.h"
#include "picon_png.h"
#include "samples.h"
#include "units.h"
#include "vframe.h"
#include "vocoder.h"

#include <math.h>
#include <string.h>









REGISTER_PLUGIN(Vocoder)




//#define USE_BANDWIDTH




VocoderConfig::VocoderConfig()
{
	wetness = INFINITYGAIN;
	carrier_track = 0;
}


int VocoderConfig::equivalent(VocoderConfig &that)
{
	if(!EQUIV(wetness, that.wetness) ||
		carrier_track != that.carrier_track) return 0;
	return 1;
}

void VocoderConfig::copy_from(VocoderConfig &that)
{
	wetness = that.wetness;
	carrier_track = that.carrier_track;
}

void VocoderConfig::interpolate(VocoderConfig &prev, 
		VocoderConfig &next, 
		int64_t prev_frame, 
		int64_t next_frame, 
		int64_t current_frame)
{
	double next_scale = (double)(current_frame - prev_frame) / (next_frame - prev_frame);
	double prev_scale = (double)(next_frame - current_frame) / (next_frame - prev_frame);
	wetness = prev.wetness * prev_scale + next.wetness * next_scale;
	carrier_track = prev.carrier_track;
}












VocoderWetness::VocoderWetness(Vocoder *plugin, int x, int y)
 : BC_FPot(x, y, plugin->config.wetness, INFINITYGAIN, 0)
{
	this->plugin = plugin;
}

int VocoderWetness::handle_event()
{
	plugin->config.wetness = get_value();
	plugin->send_configure_change();
	return 1;
}









VocoderCarrier::VocoderCarrier(Vocoder *plugin, 
	VocoderWindow *window, 
	int x, 
	int y)
 : BC_TumbleTextBox(window,
 	plugin->config.carrier_track, 
	0,
	256,
	x, 
	y,
	100)
{
	this->plugin = plugin;
}

int VocoderCarrier::handle_event()
{
	plugin->config.carrier_track = atoi(get_text());
	plugin->send_configure_change();
	return 1;
}





VocoderWindow::VocoderWindow(Vocoder *plugin)
 : PluginClientWindow(plugin, 
	320, 
	150, 
	320, 
	150,
	0)
{
	this->plugin = plugin;
}

VocoderWindow::~VocoderWindow()
{
}

void VocoderWindow::create_objects()
{
	int x = 10, y = 10;
	BC_Title *title = 0;

	add_subwindow(title = new BC_Title(x, y + 10, _("Wetness:")));
	add_subwindow(wetness = new VocoderWetness(plugin, x + title->get_w() + 10, y));
	y += wetness->get_h();



	add_subwindow(title = new BC_Title(x, y + 10, _("Carrier Track:")));
	output = new VocoderCarrier(plugin, 
		this, 
		x + title->get_w() + 10, 
		y);
	output->create_objects();
	y += 50;

	show_window();
}



void VocoderWindow::update_gui()
{
	wetness->update(plugin->config.wetness);
	output->update((int64_t)plugin->config.carrier_track);
}













VocoderFFT::VocoderFFT(Vocoder *plugin)
 : CrossfadeFFT()
{
	this->plugin = plugin;
	is_carrier = 0;
}

VocoderFFT::~VocoderFFT()
{
}


int VocoderFFT::signal_process()
{
	double wetness = DB::fromdb(plugin->config.wetness);
	if(EQUIV(plugin->config.wetness, INFINITYGAIN)) wetness = 0;


printf("VocoderFFT::signal_process %d channel=%d current_window=%d is_carrier=%d\n", 
__LINE__, 
channel, 
plugin->current_window,
is_carrier);


// Compute the envelope of the carrier
	if(is_carrier)
	{
// Get current window
		if(plugin->current_window >= plugin->carrier_windows)
		{
			double **new_carrier_real = new double*[plugin->carrier_windows + 1];
			double **new_carrier_imag = new double*[plugin->carrier_windows + 1];
			for(int i = 0; i < plugin->carrier_windows; i++)
            {
				new_carrier_real[i] = plugin->carrier_real[i];
                new_carrier_imag[i] = plugin->carrier_imag[i];
			}

            new_carrier_real[plugin->carrier_windows] = new double[window_size / 2];
            new_carrier_imag[plugin->carrier_windows] = new double[window_size / 2];

			delete [] plugin->carrier_real;
			delete [] plugin->carrier_imag;
			plugin->carrier_real = new_carrier_real;
			plugin->carrier_imag = new_carrier_imag;
			plugin->carrier_windows++;
		}

// Copy current window
		double *carrier_real = plugin->carrier_real[plugin->current_window];
		double *carrier_imag = plugin->carrier_imag[plugin->current_window];
		for(int i = 0; i < window_size / 2; i++)
		{
            carrier_real[i] = freq_real[i];
            carrier_imag[i] = freq_imag[i];
		}

		plugin->current_window++;
	}
	else
// Modulate carrier envelope with this channel
	{
    	double *carrier_real = plugin->carrier_real[plugin->current_window];
		double *carrier_imag = plugin->carrier_imag[plugin->current_window];

// Write to output
		for(int i = 0; i < window_size / 2; i++)
		{
            double magnitude = sqrt(freq_real[i] * freq_real[i] +
                freq_imag[i] * freq_imag[i]) / (window_size / 2);
//printf("%.2f\n", value);
			freq_real[i] = (magnitude + wetness) * carrier_real[i];
			freq_imag[i] = (magnitude + wetness) * carrier_imag[i];
		}


		plugin->current_window++;
//printf("VocoderFFT::signal_process %d\n", 
//__LINE__);
	}

//printf("VocoderFFT::signal_process %d\n", 
//__LINE__);
	symmetry(window_size, freq_real, freq_imag);
	return 0;
}

int VocoderFFT::read_samples(int64_t output_sample, 
	int samples, 
	Samples *buffer)
{
// printf("VocoderFFT::read_samples %d channel=%d position=%lld\n", 
// __LINE__, 
// channel,
// output_sample);

	return plugin->read_samples(buffer,
		channel,
		plugin->get_samplerate(),
		output_sample,
		samples);
}








Vocoder::Vocoder(PluginServer *server)
 : PluginAClient(server)
{
	carrier_real = 0;
	carrier_imag = 0;
	carrier_windows = 0;
	fft = 0;
	need_reconfigure = 1;
}

Vocoder::~Vocoder()
{
	if(fft)
	{
		for(int i = 0; i < PluginClient::get_total_buffers(); i++)
			delete fft[i];

		delete [] fft;
	}
	
	if(carrier_real)
	{
		for(int i = 0; i < carrier_windows; i++)
			delete [] carrier_real[i];
		delete [] carrier_real;
	}
	
	if(carrier_imag)
	{
		for(int i = 0; i < carrier_windows; i++)
			delete [] carrier_imag[i];
		delete [] carrier_imag;
	}
}

NEW_WINDOW_MACRO(Vocoder, VocoderWindow)
NEW_PICON_MACRO(Vocoder)

LOAD_CONFIGURATION_MACRO(Vocoder, VocoderConfig)


const char* Vocoder::plugin_title() { return N_("Vocoder"); }
int Vocoder::is_realtime() { return 1; }
int Vocoder::is_multichannel() { return 1; }

void Vocoder::read_data(KeyFrame *keyframe)
{
	FileXML input;
	input.set_shared_string(keyframe->get_data(), strlen(keyframe->get_data()));

	int result = 0;
	while(!result)
	{
		result = input.read_tag();

		if(!result)
		{
			if(input.tag.title_is("VOCODER"))
			{
				config.wetness = input.tag.get_property("WETNESS", config.wetness);
				config.carrier_track = input.tag.get_property("OUTPUT", config.carrier_track);
			}
		}
	}
}

void Vocoder::save_data(KeyFrame *keyframe)
{
	FileXML output;
	output.set_shared_string(keyframe->get_data(), MESSAGESIZE);

	output.tag.set_title("VOCODER");
	output.tag.set_property("WETNESS", config.wetness);
	output.tag.set_property("OUTPUT", config.carrier_track);
	output.append_tag();
	output.append_newline();

	output.terminate_string();
}

void Vocoder::reconfigure()
{
	if(!fft)
	{
		fft = new VocoderFFT*[PluginClient::get_total_buffers()];
		for(int i = 0; i < PluginClient::get_total_buffers(); i++)
		{
			fft[i] = new VocoderFFT(this);
			fft[i]->initialize(WINDOW_SIZE);
		}
	}

	need_reconfigure = 0;
}


int Vocoder::process_buffer(int64_t size, 
	Samples **buffer, 
	int64_t start_position,
	int sample_rate)
{
	need_reconfigure |= load_configuration();
	if(need_reconfigure) reconfigure();

// Process all except output channel
	int carrier_track = config.carrier_track;
	CLAMP(carrier_track, 0, PluginClient::get_total_buffers() - 1);


// Process carrier channel
	current_window = 0;
	fft[carrier_track]->is_carrier = 1;
	fft[carrier_track]->channel = carrier_track;
	fft[carrier_track]->process_buffer(start_position, 
		size, 
		buffer[carrier_track], 
		get_direction());


// Process modulator channels & write output
//printf("Vocoder::process_buffer %d\n", __LINE__);
	for(int i = 0; i < PluginClient::get_total_buffers(); i++)
	{
		if(i != carrier_track)
		{
//printf("Vocoder::process_buffer %d %d\n", __LINE__, i);
			current_window = 0;
			fft[i]->is_carrier = 0;
			fft[i]->channel = i;
			fft[i]->process_buffer(start_position, 
				size, 
				buffer[i], 
				get_direction());
		}
	}

	return 0;
}











void Vocoder::reset()
{
	need_reconfigure = 1;
	thread = 0;
	fft = 0;
}

void Vocoder::update_gui()
{
	if(thread)
	{
		if(load_configuration())
		{
			((VocoderWindow*)thread->window)->lock_window("Vocoder::update_gui");
			((VocoderWindow*)thread->window)->update_gui();
			((VocoderWindow*)thread->window)->unlock_window();
		}
	}
}



