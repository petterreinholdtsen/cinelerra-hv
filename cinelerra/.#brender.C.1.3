#include "brender.h"
#include "mutex.h"




BRender::BRender(MWindow *mwindow)
{
	this->mwindow = mwindow;
	map_lock = new Mutex;
}

BRender::~BRender()
{
	farm_server->wait_clients();
	delete farm_server;
	delete thread;
	delete map_lock;
	delete map;
}

void BRender::initialize()
{
	map = new BRenderMap;
	farm_server = new RenderFarmServer(0, 0, this);
	thread = new BRenderThread(this);
	thread->initialize();
}



// Give the last position of the EDL which hasn't changed.
// We copy the EDL and restart rendering at the lesser of position and
// our position.
void BRender::restart(EDL *edl, double position)
{
	BRenderCommand *new_command = new BRenderCommand;
	new_command->edl = new EDL;
	new_command->edl->create_objects();
	new_command->edl->copy_all(edl);
	new_command->position = position;
	new_command->command = BRenderCommand::RESTART;
	thread->send_command(new_command);
}

void BRender::stop()
{
	BRenderCommand *new_command = new BRenderCommand;
	new_command->command = BRenderCommand::STOP;
	thread->send_command(new_command);
}











BRenderCommand::BRenderCommand()
{
	edl = 0;
	command = NO_COMMAND;
	position = 0.0;
}

BRenderCommand::~BRenderCommand()
{
	if(edl) delete edl;
}














BRenderThread::BRenderThread(BRender *brender)
 : Thread(1)
{
	this->brender = brender;
	input_lock = new Mutex;
	thread_lock = new Mutex;
	input_lock->lock();
	command_queue = 0;
	command = 0;
	done = 0;
}

BRenderThread::~BRenderThread()
{
	thread_lock->lock();
	done = 1;
	input_lock->unlock();
	thread_lock->unlock();
	Thread::join();
	delete input_lock;
	delete thread_lock;
}


void BRenderThread::initialize()
{
	Thread::start();
}

void BRenderThread::send_command(BRenderCommand *command)
{
	thread_lock->lock();

	if(this->command_queue)
	{
		delete this->command_queue;
		this->command_queue = 0;
	}
	this->command_queue = command;


	input_lock->unlock();
	thread_lock->unlock();
}

int BRenderThread::is_done(int do_lock)
{
	if(do_lock) thread_lock->lock();
	int result = done;
	if(do_lock) thread_lock->unlock();
	return result;
}

void BRenderThread::run()
{
	while(!is_done(1))
	{
		BRenderCommand *new_command = 0;
		thread_lock->lock();

// Got new command
		if(command_queue)
		{
			;
		}
		else
// Wait for new command
		{
			thread_lock->unlock();
			input_lock->lock();
			thread_lock->lock();
		}

// Pull the command off
		if(!is_done(0))
		{
			new_command = command_queue;
			command_queue = 0;
		}

		thread_lock->unlock();




// Process the command here to avoid delay.
		if(!new_command)
		{
			;
		}
		else
		if(new_command->command == BRenderCommand::STOP)
		{
		}
		else
		if(new_command->command == BRenderCommand::RESTART)
		{
		}
	}
}



BRender::BRender(MWindow *mwindow)
{
	this->mwindow = mwindow;
}

BRender::~BRender()
{
}


void BRender::update(EDL *edl, double position)
{
}












BRenderCommand::BRenderCommand()
{
}

BRenderCommand::~BRenderCommand()
{
}

void BRenderCommand::send_command(BRenderCommand *command)
{
}










BRenderThread::BRenderThread()
 : Thread()
{
}

BRenderThread::~BRenderThread()
{
}













BackgroundPackageRender::BackgroundPackageRender(MWindow *mwindow, 
	BRender *brender)
 : PackageRender()
{
}

BackgroundPackageRender::~BackgroundPackageRender()
{
}












