#include "perspective.h"






REGISTER_PLUGIN(PerspectiveMain)



PerspectiveConfig::PerspectiveConfig()
{
	x1 = 0;
	y1 = 0;
	x2 = 100;
	y2 = 0;
	x3 = 100;
	y3 = 100;
	x4 = 0;
	y4 = 100;
	mode = PERSPECTIVE;
	window_w = 400;
	window_h = 400;
	current_point = 0;
}

int PerspectiveConfig::equivalent(PerspectiveConfig &that)
{
	return 
		EQUIV(x1, that.x1) &&
		EQUIV(y1, that.y1) &&
		EQUIV(x2, that.x2) &&
		EQUIV(y2, that.y2) &&
		EQUIV(x3, that.x3) &&
		EQUIV(y3, that.y3) &&
		EQUIV(x4, that.x4) &&
		EQUIV(y4, that.y4) &&
		mode == that.mode;
}

void PerspectiveConfig::copy_from(PerspectiveConfig &that)
{
	x1 = that.x1;
	y1 = that.y1;
	x2 = that.x2;
	y2 = that.y2;
	x3 = that.x3;
	y3 = that.y3;
	x4 = that.x4;
	y4 = that.y4;
	mode = that.mode;
	window_w = that.window_w;
	window_h = that.window_h;
	current_point = that.current_point;
}

void PerspectiveConfig::interpolate(PerspectiveConfig &prev, 
	PerspectiveConfig &next, 
	long prev_frame, 
	long next_frame, 
	long current_frame)
{
	double next_scale = (double)(current_frame - prev_frame) / (next_frame - prev_frame);
	double prev_scale = (double)(next_frame - current_frame) / (next_frame - prev_frame);
	this->x1 = prev.x1 * prev_scale + next.x1 * next_scale;
	this->y1 = prev.y1 * prev_scale + next.y1 * next_scale;
	this->x2 = prev.x2 * prev_scale + next.x2 * next_scale;
	this->y2 = prev.y2 * prev_scale + next.y2 * next_scale;
	this->x3 = prev.x3 * prev_scale + next.x3 * next_scale;
	this->y3 = prev.y3 * prev_scale + next.y3 * next_scale;
	this->x4 = prev.x4 * prev_scale + next.x4 * next_scale;
	this->y4 = prev.y4 * prev_scale + next.y4 * next_scale;
	mode = prev.mode;
}









PLUGIN_THREAD_OBJECT(PerspectiveMain, PerspectiveThread, PerspectiveWindow)



PerspectiveWindow::PerspectiveWindow(PerspectiveMain *plugin, int x, int y)
 : BC_Window(plugin->gui_string, 
 	x,
	y,
	plugin->config.window_w, 
	plugin->config.window_h, 
	plugin->config.window_w,
	plugin->config.window_h,
	0, 
	1)
{
//printf("PerspectiveWindow::PerspectiveWindow 1 %d %d\n", plugin->config.window_w, plugin->config.window_h);
	this->plugin = plugin; 
}

PerspectiveWindow::~PerspectiveWindow()
{
}

int PerspectiveWindow::create_objects()
{
	int x = 10, y = 10;

	add_subwindow(canvas = new PerspectiveCanvas(plugin, 
		x, 
		y, 
		get_w() - 20, 
		get_h() - 100));
	y += canvas->get_h() + 10;
	add_subwindow(new BC_Title(x, y, "Current X:"));
	x += 80;
	this->x = new PerspectiveCoord(this, 
		plugin, 
		x, 
		y, 
		plugin->get_current_x(),
		1);
	this->x->create_objects();
	x += 140;
	add_subwindow(new BC_Title(x, y, "Y:"));
	x += 20;
	this->y = new PerspectiveCoord(this, 
		plugin, 
		x, 
		y, 
		plugin->get_current_y(),
		0);
	this->y->create_objects();
	y += 30;
	x = 10;
	add_subwindow(new PerspectiveReset(plugin, x, y));
	x += 100;
	add_subwindow(mode_perspective = new PerspectiveMode(plugin, 
		x, 
		y, 
		PerspectiveConfig::PERSPECTIVE,
		"Perspective"));
	x += 120;
	add_subwindow(mode_sheer = new PerspectiveMode(plugin, 
		x, 
		y, 
		PerspectiveConfig::SHEER,
		"Sheer"));
	update_canvas();

	show_window();
	flush();
	return 0;
}

int PerspectiveWindow::close_event()
{
// Set result to 1 to indicate a plugin side close
	set_done(1);
	return 1;
}

int PerspectiveWindow::resize_event(int w, int h)
{
	return 1;
}

void PerspectiveWindow::update_canvas()
{
	canvas->clear_box(0, 0, canvas->get_w(), canvas->get_h());
	int x1, y1, x2, y2, x3, y3, x4, y4;
	calculate_canvas_coords(x1, y1, x2, y2, x3, y3, x4, y4);

// printf("PerspectiveWindow::update_canvas %d,%d %d,%d %d,%d %d,%d\n",
// x1,
// y1,
// x2,
// y2,
// x3,
// y3,
// x4,
// y4);
	canvas->set_color(BLACK);

#define DIVISIONS 10
	for(int i = 0; i <= DIVISIONS; i++)
	{
// latitude
		canvas->draw_line(
			x1 + (x4 - x1) * i / DIVISIONS,
			y1 + (y4 - y1) * i / DIVISIONS,
			x2 + (x3 - x2) * i / DIVISIONS,
			y2 + (y3 - y2) * i / DIVISIONS);
// longitude
		canvas->draw_line(
			x1 + (x2 - x1) * i / DIVISIONS,
			y1 + (y2 - y1) * i / DIVISIONS,
			x4 + (x3 - x4) * i / DIVISIONS,
			y4 + (y3 - y4) * i / DIVISIONS);
	}

// Corners
#define RADIUS 5
	if(plugin->config.current_point == 0)
		canvas->draw_disc(x1 - RADIUS, y1 - RADIUS, RADIUS * 2, RADIUS * 2);
	else
		canvas->draw_circle(x1 - RADIUS, y1 - RADIUS, RADIUS * 2, RADIUS * 2);

	if(plugin->config.current_point == 1)
		canvas->draw_disc(x2 - RADIUS, y2 - RADIUS, RADIUS * 2, RADIUS * 2);
	else
		canvas->draw_circle(x2 - RADIUS, y2 - RADIUS, RADIUS * 2, RADIUS * 2);

	if(plugin->config.current_point == 2)
		canvas->draw_disc(x3 - RADIUS, y3 - RADIUS, RADIUS * 2, RADIUS * 2);
	else
		canvas->draw_circle(x3 - RADIUS, y3 - RADIUS, RADIUS * 2, RADIUS * 2);

	if(plugin->config.current_point == 3)
		canvas->draw_disc(x4 - RADIUS, y4 - RADIUS, RADIUS * 2, RADIUS * 2);
	else
		canvas->draw_circle(x4 - RADIUS, y4 - RADIUS, RADIUS * 2, RADIUS * 2);

	canvas->flash();
	canvas->flush();
}

void PerspectiveWindow::update_mode()
{
	mode_perspective->update(plugin->config.mode == PerspectiveConfig::PERSPECTIVE);
	mode_sheer->update(plugin->config.mode == PerspectiveConfig::SHEER);
}

void PerspectiveWindow::update_coord()
{
	x->update(plugin->get_current_x());
	y->update(plugin->get_current_y());
}

void PerspectiveWindow::calculate_canvas_coords(int &x1, 
	int &y1, 
	int &x2, 
	int &y2, 
	int &x3, 
	int &y3, 
	int &x4, 
	int &y4)
{
	int w = canvas->get_w() - 1;
	int h = canvas->get_h() - 1;
	if(plugin->config.mode == PerspectiveConfig::PERSPECTIVE)
	{
		x1 = (int)(plugin->config.x1 * w / 100);
		y1 = (int)(plugin->config.y1 * h / 100);
		x2 = (int)(plugin->config.x2 * w / 100);
		y2 = (int)(plugin->config.y2 * h / 100);
		x3 = (int)(plugin->config.x3 * w / 100);
		y3 = (int)(plugin->config.y3 * h / 100);
		x4 = (int)(plugin->config.x4 * w / 100);
		y4 = (int)(plugin->config.y4 * h / 100);
	}
	else
	{
		x1 = (int)(plugin->config.x1 * w) / 100;
		y1 = 0;
		x2 = x1 + w;
		y2 = 0;
		x4 = (int)(plugin->config.x4 * w) / 100;
		y4 = h;
		x3 = x4 + w;
		y3 = h;
	}
}




PerspectiveCanvas::PerspectiveCanvas(PerspectiveMain *plugin, 
	int x, 
	int y, 
	int w,
	int h)
 : BC_SubWindow(x, y, w, h, 0xffffff)
{
	this->plugin = plugin;
	state = PerspectiveCanvas::NONE;
}



#define DISTANCE(x1, y1, x2, y2) \
(sqrt(((x2) - (x1)) * ((x2) - (x1)) + ((y2) - (y1)) * ((y2) - (y1))))

int PerspectiveCanvas::button_press_event()
{
	if(is_event_win() && cursor_inside())
	{
// Set current point
		int x1, y1, x2, y2, x3, y3, x4, y4;
		int cursor_x = get_cursor_x();
		int cursor_y = get_cursor_y();
		plugin->thread->window->calculate_canvas_coords(x1, y1, x2, y2, x3, y3, x4, y4);

		float distance1 = DISTANCE(cursor_x, cursor_y, x1, y1);
		float distance2 = DISTANCE(cursor_x, cursor_y, x2, y2);
		float distance3 = DISTANCE(cursor_x, cursor_y, x3, y3);
		float distance4 = DISTANCE(cursor_x, cursor_y, x4, y4);
// printf("PerspectiveCanvas::button_press_event %f %d %d %d %d\n", 
// distance3,
// cursor_x,
// cursor_y,
// x3,
// y3);
		float min = distance1;
		plugin->config.current_point = 0;
		if(distance2 < min)
		{
			min = distance2;
			plugin->config.current_point = 1;
		}
		if(distance3 < min)
		{
			min = distance3;
			plugin->config.current_point = 2;
		}
		if(distance4 < min)
		{
			min = distance4;
			plugin->config.current_point = 3;
		}

		if(plugin->config.mode == PerspectiveConfig::SHEER)
		{
			if(plugin->config.current_point == 1)
				plugin->config.current_point = 0;
			else
			if(plugin->config.current_point == 2)
				plugin->config.current_point = 3;
		}
		state = PerspectiveCanvas::DRAG;

// Get starting positions
		start_cursor_x = cursor_x;
		start_cursor_y = cursor_y;
		start_x = plugin->get_current_x();
		start_y = plugin->get_current_y();
		plugin->thread->window->update_coord();
		return 1;
	}

	return 0;
}

int PerspectiveCanvas::button_release_event()
{
	if(state == PerspectiveCanvas::DRAG)
	{
		state = PerspectiveCanvas::NONE;
		return 1;
	}
	return 0;
}

int PerspectiveCanvas::cursor_motion_event()
{
	if(state == PerspectiveCanvas::DRAG)
	{
printf("PerspectiveCanvas::cursor_motion_event 1 %d\n", plugin->config.current_point);
		int w = get_w() - 1;
		int h = get_h() - 1;
		plugin->set_current_x((float)(get_cursor_x() - start_cursor_x) / w * 100 + start_x);
		plugin->set_current_y((float)(get_cursor_y() - start_cursor_y) / h * 100 + start_y);
		plugin->thread->window->update_canvas();
		plugin->thread->window->update_coord();
printf("PerspectiveCanvas::cursor_motion_event 2\n");
		plugin->send_configure_change();
printf("PerspectiveCanvas::cursor_motion_event 3\n");
		return 1;
	}
	return 0;
}






PerspectiveCoord::PerspectiveCoord(PerspectiveWindow *gui,
	PerspectiveMain *plugin, 
	int x, 
	int y,
	float value,
	int is_x)
 : BC_TumbleTextBox(gui, value, (float)0, (float)100, x, y, 100)
{
	this->plugin = plugin;
	this->is_x = is_x;
}

int PerspectiveCoord::handle_event()
{
	if(is_x)
		plugin->set_current_x(atof(get_text()));
	else
		plugin->set_current_y(atof(get_text()));
	plugin->thread->window->update_canvas();
	plugin->send_configure_change();
	return 1;
}








PerspectiveReset::PerspectiveReset(PerspectiveMain *plugin, 
	int x, 
	int y)
 : BC_GenericButton(x, y, "Reset")
{
	this->plugin = plugin;
}
int PerspectiveReset::handle_event()
{
	plugin->config.x1 = 0;
	plugin->config.y1 = 0;
	plugin->config.x2 = 100;
	plugin->config.y2 = 0;
	plugin->config.x3 = 100;
	plugin->config.y3 = 100;
	plugin->config.x4 = 0;
	plugin->config.y4 = 100;
	plugin->thread->window->update_canvas();
	plugin->thread->window->update_coord();
	plugin->send_configure_change();
	return 1;
}











PerspectiveMode::PerspectiveMode(PerspectiveMain *plugin, 
	int x, 
	int y,
	int value,
	char *text)
 : BC_Radial(x, y, plugin->config.mode == value, text)
{
	this->plugin = plugin;
	this->value = value;
}
int PerspectiveMode::handle_event()
{
	plugin->config.mode = value;
	plugin->thread->window->update_mode();
	plugin->thread->window->update_canvas();
	plugin->send_configure_change();
	return 1;
}












PerspectiveMain::PerspectiveMain(PluginServer *server)
 : PluginVClient(server)
{
	PLUGIN_CONSTRUCTOR_MACRO
	engine = 0;
	temp = 0;
}

PerspectiveMain::~PerspectiveMain()
{
	PLUGIN_DESTRUCTOR_MACRO
	if(engine) delete engine;
	if(temp) delete temp;
}

char* PerspectiveMain::plugin_title() { return "Perspective"; }
int PerspectiveMain::is_realtime() { return 1; }


NEW_PICON_MACRO(PerspectiveMain)

SHOW_GUI_MACRO(PerspectiveMain, PerspectiveThread)

SET_STRING_MACRO(PerspectiveMain)

RAISE_WINDOW_MACRO(PerspectiveMain)

LOAD_CONFIGURATION_MACRO(PerspectiveMain, PerspectiveConfig)



void PerspectiveMain::update_gui()
{
	if(thread)
	{
//printf("PerspectiveMain::update_gui 1\n");
		thread->window->lock_window();
//printf("PerspectiveMain::update_gui 2\n");
		load_configuration();
		thread->window->update_coord();
		thread->window->update_mode();
		thread->window->update_canvas();
		thread->window->unlock_window();
//printf("PerspectiveMain::update_gui 3\n");
	}
}


int PerspectiveMain::load_defaults()
{
	char directory[1024], string[1024];
// set the default directory
	sprintf(directory, "%sperspective.rc", BCASTDIR);

// load the defaults
	defaults = new Defaults(directory);
	defaults->load();

	config.x1 = defaults->get("X1", config.x1);
	config.x2 = defaults->get("X2", config.x2);
	config.x3 = defaults->get("X3", config.x3);
	config.x4 = defaults->get("X4", config.x4);
	config.y1 = defaults->get("Y1", config.y1);
	config.y2 = defaults->get("Y2", config.y2);
	config.y3 = defaults->get("Y3", config.y3);
	config.y4 = defaults->get("Y4", config.y4);

	config.mode = defaults->get("MODE", config.mode);
	config.window_w = defaults->get("WINDOW_W", config.window_w);
	config.window_h = defaults->get("WINDOW_H", config.window_h);
	return 0;
}


int PerspectiveMain::save_defaults()
{
	defaults->update("X1", config.x1);
	defaults->update("X2", config.x2);
	defaults->update("X3", config.x3);
	defaults->update("X4", config.x4);
	defaults->update("Y1", config.y1);
	defaults->update("Y2", config.y2);
	defaults->update("Y3", config.y3);
	defaults->update("Y4", config.y4);

	defaults->update("MODE", config.mode);
	defaults->update("WINDOW_W", config.window_w);
	defaults->update("WINDOW_H", config.window_h);
	defaults->save();
	return 0;
}



void PerspectiveMain::save_data(KeyFrame *keyframe)
{
	FileXML output;

// cause data to be stored directly in text
	output.set_shared_string(keyframe->data, MESSAGESIZE);
	output.tag.set_title("PERSPECTIVE");

	output.tag.set_property("X1", config.x1);
	output.tag.set_property("X2", config.x2);
	output.tag.set_property("X3", config.x3);
	output.tag.set_property("X4", config.x4);
	output.tag.set_property("Y1", config.y1);
	output.tag.set_property("Y2", config.y2);
	output.tag.set_property("Y3", config.y3);
	output.tag.set_property("Y4", config.y4);

	output.tag.set_property("MODE", config.mode);
	output.tag.set_property("WINDOW_W", config.window_w);
	output.tag.set_property("WINDOW_H", config.window_h);
	output.append_tag();
	output.terminate_string();
}

void PerspectiveMain::read_data(KeyFrame *keyframe)
{
	FileXML input;

	input.set_shared_string(keyframe->data, strlen(keyframe->data));

	int result = 0;

	while(!result)
	{
		result = input.read_tag();

		if(!result)
		{
			if(input.tag.title_is("PERSPECTIVE"))
			{
				config.x1 = input.tag.get_property("X1", config.x1);
				config.x2 = input.tag.get_property("X2", config.x2);
				config.x3 = input.tag.get_property("X3", config.x3);
				config.x4 = input.tag.get_property("X4", config.x4);
				config.y1 = input.tag.get_property("Y1", config.y1);
				config.y2 = input.tag.get_property("Y2", config.y2);
				config.y3 = input.tag.get_property("Y3", config.y3);
				config.y4 = input.tag.get_property("Y4", config.y4);

				config.mode = input.tag.get_property("MODE", config.mode);
				config.window_w = input.tag.get_property("WINDOW_W", config.window_w);
				config.window_h = input.tag.get_property("WINDOW_H", config.window_h);
			}
		}
	}
}

float PerspectiveMain::get_current_x()
{
	switch(config.current_point)
	{
		case 0:
			return config.x1;
			break;
		case 1:
			return config.x2;
			break;
		case 2:
			return config.x3;
			break;
		case 3:
			return config.x4;
			break;
	}
}

float PerspectiveMain::get_current_y()
{
	switch(config.current_point)
	{
		case 0:
			return config.y1;
			break;
		case 1:
			return config.y2;
			break;
		case 2:
			return config.y3;
			break;
		case 3:
			return config.y4;
			break;
	}
}

void PerspectiveMain::set_current_x(float value)
{
	switch(config.current_point)
	{
		case 0:
			config.x1 = value;
			break;
		case 1:
			config.x2 = value;
			break;
		case 2:
			config.x3 = value;
			break;
		case 3:
			config.x4 = value;
			break;
	}
}

void PerspectiveMain::set_current_y(float value)
{
	switch(config.current_point)
	{
		case 0:
			config.y1 = value;
			break;
		case 1:
			config.y2 = value;
			break;
		case 2:
			config.y3 = value;
			break;
		case 3:
			config.y4 = value;
			break;
	}
}



int PerspectiveMain::process_realtime(VFrame *input_ptr, VFrame *output_ptr)
{
	int need_reconfigure = load_configuration();

	if(!engine) engine = new PerspectiveEngine(this,
		get_project_smp() + 1,
		get_project_smp() + 1);

	this->input = input_ptr;
	this->output = output_ptr;


	if(input_ptr->get_rows()[0] == output_ptr->get_rows()[0])
	{
		if(!temp) 
		{
			temp = new VFrame(0,
				input_ptr->get_w() * OVERSAMPLE,
				input_ptr->get_h() * OVERSAMPLE,
				input_ptr->get_color_model());
		}
	}

// printf("PerspectiveMain::process_realtime %f %f %f %f %f %f %f %f\n",
// config.x1,
// config.x2,
// config.x3,
// config.x4,
// config.y1,
// config.y2,
// config.y3,
// config.y4);
	if( EQUIV(config.x1, 0)   && EQUIV(config.y1, 0) &&
		EQUIV(config.x2, 100) && EQUIV(config.y2, 0) &&
		EQUIV(config.x3, 100) && EQUIV(config.y3, 100) &&
		EQUIV(config.x4, 0)   && EQUIV(config.y4, 100))
	{
//printf("PerspectiveMain::process_realtime 2\n");
		if(input_ptr->get_rows()[0] != output_ptr->get_rows()[0])
			output_ptr->copy_from(input_ptr);
		return 1;
	}

	temp->clear_frame();
	engine->process_packages();

// Resample
	int w = input->get_w();
	int h = input->get_h();

#define RESAMPLE(type, components, chroma_offset) \
{ \
	for(int i = 0; i < h; i++) \
	{ \
		type *out_row = (type*)output->get_rows()[i]; \
		type *in_row1 = (type*)temp->get_rows()[i * OVERSAMPLE]; \
		type *in_row2 = (type*)temp->get_rows()[i * OVERSAMPLE + 1]; \
		for(int j = 0; j < w; j++) \
		{ \
			out_row[0] = (in_row1[0] +  \
					in_row1[components] +  \
					in_row2[0] +  \
					in_row2[components]) /  \
				OVERSAMPLE /  \
				OVERSAMPLE; \
			out_row[1] = ((in_row1[1] +  \
						in_row1[components + 1] +  \
						in_row2[1] +  \
						in_row2[components + 1]) -  \
					chroma_offset *  \
					OVERSAMPLE *  \
					OVERSAMPLE) /  \
				OVERSAMPLE /  \
				OVERSAMPLE + \
				chroma_offset; \
			out_row[2] = ((in_row1[2] +  \
						in_row1[components + 2] +  \
						in_row2[2] +  \
						in_row2[components + 2]) -  \
					chroma_offset *  \
					OVERSAMPLE *  \
					OVERSAMPLE) /  \
				OVERSAMPLE /  \
				OVERSAMPLE + \
				chroma_offset; \
			if(components == 4) \
			{ \
				out_row[2] = (in_row1[3] +  \
						in_row1[components + 3] +  \
						in_row2[3] +  \
						in_row2[components + 3]) /  \
					OVERSAMPLE /  \
					OVERSAMPLE; \
			} \
			out_row += components; \
			in_row1 += components * OVERSAMPLE; \
			in_row2 += components * OVERSAMPLE; \
		} \
	} \
}

	switch(input_ptr->get_color_model())
	{
		case BC_RGB888:
			RESAMPLE(unsigned char, 3, 0)
			break;
		case BC_RGBA8888:
			RESAMPLE(unsigned char, 4, 0)
			break;
		case BC_YUV888:
			RESAMPLE(unsigned char, 3, 0x80)
			break;
		case BC_YUVA8888:
			RESAMPLE(unsigned char, 4, 0x80)
			break;
		case BC_RGB161616:
			RESAMPLE(uint16_t, 3, 0)
			break;
		case BC_RGBA16161616:
			RESAMPLE(uint16_t, 4, 0)
			break;
		case BC_YUV161616:
			RESAMPLE(uint16_t, 3, 0x8000)
			break;
		case BC_YUVA16161616:
			RESAMPLE(uint16_t, 4, 0x8000)
			break;
	}
	return 1;
}





PerspectivePackage::PerspectivePackage()
 : LoadPackage()
{
}




PerspectiveUnit::PerspectiveUnit(PerspectiveEngine *server, 
	PerspectiveMain *plugin)
 : LoadClient(server)
{
	this->plugin = plugin;
	this->server = server;
}








// 1:
// in_x_fraction = ((out_x - x1) - out_left_diff * in_y_fraction) / (top_w + out_w_diff * in_y_fraction)
// 
// 2:
// in_y_fraction = ((out_y - y1) - out_top_diff * in_x_fraction) / (left_h + out_h_diff * in_x_fraction);
//
// Iteratively calculate in_x_fraction and in_y_fraction based on
// initial x and y.  x = out_x - x1.  y = out_y - y1.
// Abandonned in favor of more versatile projection.
void PerspectiveUnit::calculate_input(float &x, 
	float &y,
	float &out_left_diff,
	float &top_w,
	float &out_w_diff,
	float &out_top_diff,
	float &left_h,
	float &out_h_diff,
	float &vprecision,
	float &in_y_fraction,
	float &in_x_fraction)
{
// Approximate initial y
	in_y_fraction = y / left_h;
	int done = 0, iteration = 0;

//printf("PerspectiveUnit::calculate_input 1\n");
	while(!done)
	{
		in_x_fraction = (x - out_left_diff * in_y_fraction) / 
				(top_w + out_w_diff * in_y_fraction);
		float new_in_y_fraction = (y - out_top_diff * in_x_fraction) / 
				(left_h + out_h_diff * in_x_fraction);

		float diff = new_in_y_fraction - in_y_fraction;
		in_y_fraction = new_in_y_fraction;
		if(fabs(diff) < vprecision ||
			iteration > 1000)
			done = 1;
		iteration++;
	}
//printf("PerspectiveUnit::calculate_input 2\n");
}







void PerspectiveUnit::process_package(LoadPackage *package)
{
	PerspectivePackage *pkg = (PerspectivePackage*)package;
	int w = plugin->input->get_w();
	int h = plugin->input->get_h();
	float w_f = w;
	float h_f = h;

// Calculate real coords
	float x1, y1, x2, y2, x3, y3, x4, y4;
	if(plugin->config.mode == PerspectiveConfig::PERSPECTIVE)
	{
		x1 = (float)plugin->config.x1 * w_f / 100;
		y1 = (float)plugin->config.y1 * h_f / 100;
		x2 = (float)plugin->config.x2 * w_f / 100;
		y2 = (float)plugin->config.y2 * h_f / 100;
		x3 = (float)plugin->config.x3 * w_f / 100;
		y3 = (float)plugin->config.y3 * h_f / 100;
		x4 = (float)plugin->config.x4 * w_f / 100;
		y4 = (float)plugin->config.y4 * h_f / 100;
	}
	else
	{
		x1 = (float)plugin->config.x1 * w_f / 100;
		y1 = 0;
		x2 = x1 + w_f;
		y2 = 0;
		x4 = (float)plugin->config.x4 * w_f / 100;
		y4 = h_f;
		x3 = x4 + w_f;
		y3 = h_f;
	}

	int max_x = w * OVERSAMPLE - 1;
	int max_y = h * OVERSAMPLE - 1;
	float top_w = x2 - x1;
	float bottom_w = x3 - x4;
	float left_h = y4 - y1;
	float right_h = y3 - y2;
	float out_w_diff = bottom_w - top_w;
	float out_left_diff = x4 - x1;
	float out_h_diff = right_h - left_h;
	float out_top_diff = y2 - y1;
	float distance1 = DISTANCE(x1, y1, x2, y2);
	float distance2 = DISTANCE(x2, y2, x3, y3);
	float distance3 = DISTANCE(x3, y3, x4, y4);
	float distance4 = DISTANCE(x4, y4, x1, y1);
	float max_v = MAX(distance1, distance3);
	float max_h = MAX(distance2, distance4);
	float max_dimension = MAX(max_v, max_h);
	float min_dimension = MIN(h_f, w_f);
	float step = min_dimension / max_dimension / OVERSAMPLE;


// Projection
#define PERSPECTIVE(type, components) \
{ \
	type **in_rows = (type**)plugin->input->get_rows(); \
	type **out_rows = (type**)plugin->temp->get_rows(); \
 \
	for(float in_y = pkg->y1; in_y < pkg->y2; in_y += step) \
	{ \
		int i = (int)in_y; \
		type *in_row = in_rows[i]; \
		for(float in_x = 0; in_x < w; in_x += step) \
		{ \
			int j = (int)in_x; \
			float in_x_fraction = in_x / w_f; \
			float in_y_fraction = in_y / h_f; \
			int out_x = (int)((x1 + \
				out_left_diff * in_y_fraction + \
				(top_w + out_w_diff * in_y_fraction) * in_x_fraction) *  \
				OVERSAMPLE); \
			int out_y = (int)((y1 +  \
				out_top_diff * in_x_fraction + \
				(left_h + out_h_diff * in_x_fraction) * in_y_fraction) * \
				OVERSAMPLE); \
			CLAMP(out_x, 0, max_x); \
			CLAMP(out_y, 0, max_y); \
			type *dst = out_rows[out_y] + out_x * components; \
			type *src = in_row + j * components; \
			dst[0] = src[0]; \
			dst[1] = src[1]; \
			dst[2] = src[2]; \
			if(components == 4) dst[3] = src[3]; \
		} \
	} \
}

	switch(plugin->input->get_color_model())
	{
		case BC_RGB888:
			PERSPECTIVE(unsigned char, 3)
			break;
		case BC_RGBA8888:
			PERSPECTIVE(unsigned char, 4)
			break;
		case BC_YUV888:
			PERSPECTIVE(unsigned char, 3)
			break;
		case BC_YUVA8888:
			PERSPECTIVE(unsigned char, 4)
			break;
		case BC_RGB161616:
			PERSPECTIVE(uint16_t, 3)
			break;
		case BC_RGBA16161616:
			PERSPECTIVE(uint16_t, 4)
			break;
		case BC_YUV161616:
			PERSPECTIVE(uint16_t, 3)
			break;
		case BC_YUVA16161616:
			PERSPECTIVE(uint16_t, 4)
			break;
	}
}






PerspectiveEngine::PerspectiveEngine(PerspectiveMain *plugin, 
	int total_clients,
	int total_packages)
 : LoadServer(/* 1, 1 */ total_clients, total_packages )
{
	this->plugin = plugin;
}

void PerspectiveEngine::init_packages()
{
	int package_h = (int)((float)plugin->output->get_h() / 
			total_packages + 1);
	int y1 = 0;
	for(int i = 0; i < total_packages; i++)
	{
		PerspectivePackage *package = (PerspectivePackage*)packages[i];
		package->y1 = y1;
		package->y2 = y1 + package_h;
		package->y1 = MIN(plugin->output->get_h(), package->y1);
		package->y2 = MIN(plugin->output->get_h(), package->y2);
		y1 = package->y2;
	}
}

LoadClient* PerspectiveEngine::new_client()
{
	return new PerspectiveUnit(this, plugin);
}

LoadPackage* PerspectiveEngine::new_package()
{
	return new PerspectivePackage;
}





