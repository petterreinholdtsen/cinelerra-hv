// V4L2 is incompatible with large file support
#undef _FILE_OFFSET_BITS
#undef _LARGEFILE_SOURCE
#undef _LARGEFILE64_SOURCE



#include "assets.h"
#include "channel.h"
#include "chantables.h"
#include "clip.h"
#include "condition.h"
#include "file.h"
#include "libmjpeg.h"
#include "picture.h"
#include "preferences.h"
#include "quicktime.h"
#include "recordconfig.h"
#include "vdevicev4l2jpeg.h"
#include "vframe.h"
#include "videodevice.h"

#include <fcntl.h>
#include <string.h>
#include <sys/ioctl.h>
#include <sys/mman.h>
#include <unistd.h>



#define BUFFER_TIMEOUT 250000



VDeviceV4L2JPEGThread::VDeviceV4L2JPEGThread(VDeviceV4L2JPEG *device)
 : Thread(1, 0, 0)
{
	this->device = device;
	video_lock = new Condition(0, "VDeviceV4L2JPEGThread::video_lock");
	buffer_lock = new Mutex("VDeviceV4L2JPEGThread::buffer_lock");
	user_buffers = 0;
	device_buffers = 0;
	buffer_valid = 0;
	current_inbuffer = 0;
	current_outbuffer = 0;
	total_buffers = 0;
	first_frame = 1;
	done = 0;
	input_fd = 0;
}

VDeviceV4L2JPEGThread::~VDeviceV4L2JPEGThread()
{
	if(Thread::running())
	{
		done = 1;
		Thread::cancel();
		Thread::join();
	}

	if(user_buffers)
	{
		for(int i = 0; i < total_buffers; i++)
		{
			delete user_buffers[i];
		}
		delete [] user_buffers;
		delete [] buffer_valid;
	}

	if(device_buffers)
	{
		for(int i = 0; i < total_buffers; i++)
		{
			if(device_buffers[i]->get_data()) 
				munmap(device_buffers[i]->get_data(),
					device_buffers[i]->get_compressed_allocated());
			delete device_buffers[i];
		}
		delete [] device_buffers;
	}

	delete video_lock;
	delete buffer_lock;

	if(input_fd > 0) close(input_fd);
}

void VDeviceV4L2JPEGThread::start()
{
// Allocate user space buffers
	total_buffers = device->device->in_config->capture_length;
	user_buffers = new VFrame*[total_buffers];
	device_buffers = new VFrame*[total_buffers];
	buffer_valid = new int[total_buffers];
	for(int i = 0; i < total_buffers; i++)
	{
		user_buffers[i] = new VFrame;
		device_buffers[i] = new VFrame;
	}
	bzero(buffer_valid, sizeof(int) * total_buffers);

	Thread::start();
}

void VDeviceV4L2JPEGThread::run()
{
// Set up the device
	int error = 0;
	Thread::enable_cancel();



	if((input_fd = open(device->device->in_config->v4l2jpeg_in_device, 
		O_RDWR)) < 0)
	{
		perror("VDeviceV4L2JPEGThread::run");
		error = 1;
	}
	
	if(!error)
	{
		device->device->set_cloexec_flag(input_fd, 1);


		struct v4l2_capability cap;
		if(ioctl(input_fd, VIDIOC_QUERYCAP, &cap))
			perror("VDeviceV4L2JPEGThread::run VIDIOC_QUERYCAP");

// printf("VDeviceV4L2JPEGThread::run input_fd=%d driver=%s card=%s bus_info=%s version=%d\n",
// input_fd,
// cap.driver,
// cap.card,
// cap.bus_info,
// cap.version);
// printf("    %s%s%s%s%s%s%s%s%s%s%s%s\n", 
// (cap.capabilities & V4L2_CAP_VIDEO_CAPTURE) ? "V4L2_CAP_VIDEO_CAPTURE " : "",
// (cap.capabilities & V4L2_CAP_VIDEO_OUTPUT) ? "V4L2_CAP_VIDEO_OUTPUT " : "",
// (cap.capabilities & V4L2_CAP_VIDEO_OVERLAY) ? "V4L2_CAP_VIDEO_OVERLAY " : "",
// (cap.capabilities & V4L2_CAP_VBI_CAPTURE) ? "V4L2_CAP_VBI_CAPTURE " : "",
// (cap.capabilities & V4L2_CAP_VBI_OUTPUT) ? "V4L2_CAP_VBI_OUTPUT " : "",
// (cap.capabilities & V4L2_CAP_RDS_CAPTURE) ? "V4L2_CAP_RDS_CAPTURE " : "",
// (cap.capabilities & V4L2_CAP_TUNER) ? "V4L2_CAP_TUNER " : "",
// (cap.capabilities & V4L2_CAP_AUDIO) ? "V4L2_CAP_AUDIO " : "",
// (cap.capabilities & V4L2_CAP_RADIO) ? "V4L2_CAP_RADIO " : "",
// (cap.capabilities & V4L2_CAP_READWRITE) ? "V4L2_CAP_READWRITE " : "",
// (cap.capabilities & V4L2_CAP_ASYNCIO) ? "V4L2_CAP_ASYNCIO " : "",
// (cap.capabilities & V4L2_CAP_STREAMING) ? "V4L2_CAP_STREAMING " : "");


// Set up frame rate
		struct v4l2_streamparm v4l2_parm;
		v4l2_parm.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
		if(ioctl(input_fd, VIDIOC_G_PARM, &v4l2_parm) < 0)
			perror("VDeviceV4L2JPEGThread::run VIDIOC_G_PARM");
		if(v4l2_parm.parm.capture.capability & V4L2_CAP_TIMEPERFRAME)
		{
			v4l2_parm.parm.capture.capturemode |= V4L2_CAP_TIMEPERFRAME;


			v4l2_parm.parm.capture.timeperframe.numerator = 1;
			v4l2_parm.parm.capture.timeperframe.denominator = 
				(unsigned long)((float)1 / 
				device->device->frame_rate * 
				10000000);
			if(ioctl(input_fd, VIDIOC_S_PARM, &v4l2_parm) < 0)
				perror("VDeviceV4L2JPEGThread::run VIDIOC_S_PARM");

			if(ioctl(input_fd, VIDIOC_G_PARM, &v4l2_parm) < 0)
				perror("VDeviceV4L2JPEGThread::run VIDIOC_G_PARM");
		}

// Set up data format
		struct v4l2_format v4l2_params;
		v4l2_params.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
		if(ioctl(input_fd, VIDIOC_G_FMT, &v4l2_params) < 0)
			perror("VDeviceV4L2JPEGThread::run VIDIOC_G_FMT");
		v4l2_params.fmt.pix.width = device->device->in_config->w;
		v4l2_params.fmt.pix.height = device->device->in_config->h;
		v4l2_params.fmt.pix.pixelformat = V4L2_PIX_FMT_MJPEG;
		if(ioctl(input_fd, VIDIOC_S_FMT, &v4l2_params) < 0)
			perror("VDeviceV4L2JPEGThread::run VIDIOC_S_FMT");
		if(ioctl(input_fd, VIDIOC_G_FMT, &v4l2_params) < 0)
			perror("VDeviceV4L2JPEGThread::run VIDIOC_G_FMT");

// Set input
		Channel *device_channel = 0;
		if(device->device->channel->input >= 0 &&
			device->device->channel->input < device->device->get_inputs()->total)
		{
			device_channel = device->device->get_inputs()->values[
				device->device->channel->input];
		}

// Try first channel
		if(!device_channel)
		{
			if(device->device->get_inputs()->total)
			{
				device_channel = device->device->get_inputs()->values[0];
				printf("VDeviceV4L2JPEGThread::run user channel not found.  Using %s\n",
					device_channel->device_name);
			}
			else
			{
				printf("VDeviceV4L2JPEGThread::run channel \"%s\" not found.\n",
					device->device->channel->title);
			}
		}

// Translate channel to API structures
		struct v4l2_tuner tuner;
		int input = 0;
		if(device_channel)
		{
			tuner.index = device_channel->device_index;
			input = device_channel->device_index;
		}
		else
		{
			tuner.index = 0;
			input = 0;
		}

		if(ioctl(input_fd, VIDIOC_S_TUNER, &tuner) < 0)
			perror("VDeviceV4L2JPEGThread::run VIDIOC_S_TUNER");

		if(ioctl(input_fd, VIDIOC_S_INPUT, &input) < 0)
			perror("VDeviceV4L2JPEGThread::run VIDIOC_S_INPUT");

// Set norm
		v4l2_std_id std_id;
		switch(device->device->channel->norm)
		{
			case NTSC: std_id = V4L2_STD_NTSC; break;
			case PAL: std_id = V4L2_STD_PAL; break;
			case SECAM: std_id = V4L2_STD_SECAM; break;
			default: std_id = V4L2_STD_NTSC_M; break;
		}

		if(ioctl(input_fd, VIDIOC_S_STD, &std_id))
			perror("VDeviceV4L2JPEGThread::run VIDIOC_S_STD");


// printf("VDeviceV4L2JPEGThread::run input=%d norm=%d\n",
// device->device->channel->input,
// device->device->channel->norm);

// Set picture controls
		Picture *picture = device->device->picture;
		for(int i = 0; i < picture->controls.total; i++)
		{
			struct v4l2_control ctrl_arg;
			PictureItem *item = picture->controls.values[i];
//printf("VDeviceV4L2JPEGThread::run %x %d\n", item->device_id, item->value);
			ctrl_arg.id = item->device_id;
			ctrl_arg.value = item->value;
			if(ioctl(input_fd, VIDIOC_S_CTRL, &ctrl_arg) < 0)
				perror("VDeviceV4L2JPEGThread::run VIDIOC_G_CTRL");
		}

// Set compression
		struct v4l2_jpegcompression jpeg_arg;
		if(ioctl(input_fd, VIDIOC_G_JPEGCOMP, &jpeg_arg) < 0)
			perror("VDeviceV4L2JPEGThread::run VIDIOC_G_JPEGCOMP");
		jpeg_arg.quality = device->device->quality / 2;
		if(ioctl(input_fd, VIDIOC_S_JPEGCOMP, &jpeg_arg) < 0)
			perror("VDeviceV4L2JPEGThread::run VIDIOC_S_JPEGCOMP");

// Allocate buffers.  Errors here are fatal.
		Thread::disable_cancel();
		struct v4l2_requestbuffers requestbuffers;

		requestbuffers.count = device->device->in_config->capture_length;
		requestbuffers.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
		requestbuffers.memory = V4L2_MEMORY_MMAP;
		if(ioctl(input_fd, VIDIOC_REQBUFS, &requestbuffers) < 0)
		{
			perror("VDeviceV4L2JPEGThread::run VIDIOC_REQBUFS");
			error = 1;
		}
		else
		{
			for(int i = 0; i < requestbuffers.count; i++)
			{
				struct v4l2_buffer buffer;
				buffer.type = requestbuffers.type;
				buffer.index = i;
				if(ioctl(input_fd, VIDIOC_QUERYBUF, &buffer) < 0)
				{
					perror("VDeviceV4L2JPEGThread::run VIDIOC_QUERYBUF");
					error = 1;
					break;
				}

				unsigned char *data = (unsigned char*)mmap(NULL,
					buffer.length,
					PROT_READ | PROT_WRITE,
					MAP_SHARED,
					input_fd,
					buffer.m.offset);
				if(data == MAP_FAILED)
				{
					perror("VDeviceV4L2JPEGThread::run mmap");
					error = 1;
					break;
				}

				VFrame *frame = device_buffers[i];
				frame->set_compressed_memory(data,
					0,
					buffer.length);
			}
		}
		Thread::enable_cancel();
	}


// Start capturing
	if(!error)
	{
		for(int i = 0; i < total_buffers; i++)
		{
			struct v4l2_buffer buffer;
			buffer.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
			buffer.index = i;
			if(ioctl(input_fd, VIDIOC_QBUF, &buffer) < 0)
				perror("VDeviceV4L2JPEGThread::run VIDIOC_QBUF");
		}

		int streamon_arg = V4L2_BUF_TYPE_VIDEO_CAPTURE;
		if(ioctl(input_fd, VIDIOC_STREAMON, &streamon_arg) < 0)
			perror("VDeviceV4L2JPEGThread::run VIDIOC_STREAMON");
	}

	Thread::disable_cancel();


// Read buffers continuously
	first_frame = 0;
	while(!done && !error)
	{
		Thread::enable_cancel();
		struct v4l2_buffer buffer;
		buffer.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;

//Timer timer;
//timer.update();

		if(ioctl(input_fd, VIDIOC_DQBUF, &buffer) < 0)
		{
			sleep(1);
			Thread::disable_cancel();
			perror("VDeviceV4L2JPEGThread::run VIDIOC_DQBUF");
		}
		else
		{
			Thread::disable_cancel();
// printf("VDeviceV4L2JPEGThread::run 5 bytesused=%d field=%d length=%d\n",
// buffer.bytesused,
// buffer.field,
// buffer.length);
//printf("VDeviceV4L2JPEGThread::run 2 %lld\n", timer.get_difference());

// Transfer buffer to output frame if output frame is invalid
			buffer_lock->lock("VDeviceV4L2JPEGThread::run");
			if(!buffer_valid[current_inbuffer])
			{
				user_buffers[current_inbuffer]->allocate_compressed_data(
					buffer.bytesused);
				user_buffers[current_inbuffer]->set_compressed_size(
					buffer.bytesused);
				memcpy(user_buffers[current_inbuffer]->get_data(),
					device_buffers[buffer.index]->get_data(),
					buffer.bytesused);

				buffer_valid[current_inbuffer] = 1;
				current_inbuffer++;
				if(current_inbuffer >= total_buffers)
					current_inbuffer = 0;
			}
			buffer_lock->unlock();
			video_lock->unlock();

// Release buffer for capturing
			if(ioctl(input_fd, VIDIOC_QBUF, &buffer) < 0)
				perror("VDeviceV4L2JPEGThread::run VIDIOC_QBUF");
		}
	}
}

VFrame* VDeviceV4L2JPEGThread::get_buffer(int *timed_out)
{
	VFrame *result = 0;
	*timed_out = 0;

// Acquire buffer table
	buffer_lock->lock("VDeviceV4L2JPEGThread::read_frame 1");
// Test for buffer availability
	while(!buffer_valid[current_outbuffer] && !*timed_out && !first_frame)
	{
		buffer_lock->unlock();
		*timed_out = video_lock->timed_lock(BUFFER_TIMEOUT, 
			"VDeviceV4L2JPEGThread::read_frame 2");
		buffer_lock->lock("VDeviceV4L2JPEGThread::read_frame 3");
	}

// Copy frame
	if(buffer_valid[current_outbuffer])
	{
		result = user_buffers[current_outbuffer];
	}


	buffer_lock->unlock();
	return result;
}

void VDeviceV4L2JPEGThread::put_buffer()
{
	buffer_lock->lock("VDeviceV4L2JPEGThread::put_buffer");
	buffer_valid[current_outbuffer] = 0;
	current_outbuffer++;
	if(current_outbuffer >= total_buffers)
		current_outbuffer = 0;
	buffer_lock->unlock();
}













VDeviceV4L2JPEG::VDeviceV4L2JPEG(VideoDevice *device)
 : VDeviceBase(device)
{
	initialize();
}

VDeviceV4L2JPEG::~VDeviceV4L2JPEG()
{
	close_all();
}

int VDeviceV4L2JPEG::initialize()
{
	thread = 0;
}


int VDeviceV4L2JPEG::open_input()
{
	device->channel->use_norm = 1;
	device->channel->use_input = 1;

	if((input_fd = open(device->in_config->v4l2jpeg_in_device, O_RDWR)) < 0)
	{
		perror("VDeviceV4L::open_input");
		return 1;
	}
	else
	{
// Get the inputs
		int i = 0;
		int done = 0;
		char *new_source;

		while(!done && i < 20)
		{
			struct v4l2_input arg;
			bzero(&arg, sizeof(arg));
			arg.index = i;
			
			if(ioctl(input_fd, VIDIOC_ENUMINPUT, &arg) < 0)
			{
// Finished
				done = 1;
			}
			else
			{
				Channel *channel = device->new_input_source((char*)arg.name);
				channel->device_index = i;
				channel->tuner = arg.tuner;
			}
			i++;
		}

// Get the picture controls
		for(i = V4L2_CID_BASE; i < V4L2_CID_LASTP1; i++)
		{
			struct v4l2_queryctrl arg;
			bzero(&arg, sizeof(arg));
			arg.id = i;
// This returns errors for unsupported controls which is what we want.
			if(!ioctl(input_fd, VIDIOC_QUERYCTRL, &arg))
			{
				PictureItem *item = device->picture->new_item((char*)arg.name);
				item->device_id = arg.id;
				item->min = arg.minimum;
				item->max = arg.maximum;
				item->step = arg.step;
				item->default_ = arg.default_value;
				item->type = arg.type;
				item->value = arg.default_value;
// printf("VDeviceV4L2JPEG::open_input 1 %s %x %d\n", 
// item->name, 
// item->device_id,
// device->picture->controls.total);
			}
		}

		close(input_fd);
	}
	return 0;
}

int VDeviceV4L2JPEG::close_all()
{
	if(thread) delete thread;
	thread = 0;
	return 0;
}

int VDeviceV4L2JPEG::get_best_colormodel(Asset *asset)
{
	return BC_COMPRESSED;
}

int VDeviceV4L2JPEG::read_buffer(VFrame *frame)
{
	int result = 0;

	if((device->channel_changed || device->picture_changed) && thread)
	{
		delete thread;
		thread = 0;
	}

	if(!thread)
	{
		device->channel_changed = 0;
		device->picture_changed = 0;
		thread = new VDeviceV4L2JPEGThread(this);
		thread->start();
	}


// Get buffer from thread
	int timed_out;
	VFrame *buffer = thread->get_buffer(&timed_out);



	if(buffer)
	{
		frame->allocate_compressed_data(buffer->get_compressed_size());
		frame->set_compressed_size(buffer->get_compressed_size());

// Transfer fields to frame
		if(device->odd_field_first)
		{
			int field2_offset = mjpeg_get_field2((unsigned char*)buffer->get_data(), 
				buffer->get_compressed_size());
			int field1_len = field2_offset;
			int field2_len = buffer->get_compressed_size() - 
				field2_offset;

			memcpy(frame->get_data(), 
				buffer->get_data() + field2_offset, 
				field2_len);
			memcpy(frame->get_data() + field2_len, 
				buffer->get_data(), 
				field1_len);
		}
		else
		{
			bcopy(buffer->get_data(), 
				frame->get_data(), 
				buffer->get_compressed_size());
		}

		thread->put_buffer();
	}
	else
	{
// Driver in 2.6.3 needs to be restarted when it loses sync.
		if(timed_out)
		{
			delete thread;
			thread = 0;
		}
		result = 1;
	}

	
	return result;
}






